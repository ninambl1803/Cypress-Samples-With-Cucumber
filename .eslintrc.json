{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint"],
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "prettier" // Add "prettier" last. This will turn off eslint rules conflicting with prettier. This is not what will format our code.
  ],
  "rules": {
    // I suggest you add those two rules:
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-var-requires": "off",
    "sort-imports": [
      "error",
      {
        "ignoreCase": true,
        "ignoreDeclarationSort": true
      }
    ],
    "import/order": [
      1,
      {
        "groups": [
          "external",
          "builtin",
          "internal",
          "sibling",
          "parent",
          "index"
        ],
        "pathGroups": [
          {
            "pattern": "src",
            "group": "internal"
          }
        ],
        "pathGroupsExcludedImportTypes": ["internal"],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      //Enforce that Component name and function to be  ["PascalCase", "camelCase"]
      {
        "selector": ["function"],
        "format": ["PascalCase", "camelCase"]
      },
      {
        "selector": ["variable"],
        "types": ["function"],
        "format": ["PascalCase", "camelCase"]
      },

      //Enforce that private members are prefixed with an underscore
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      //Enforce that boolean variables are prefixed with an allowed verb
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "should", "has", "can", "did", "will"]
      },
      //Enforce that all variables are either in PascalCase, camelCase or UPPER_CASE
      //In case of using styled-component, PascalCase is suggested in the document
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"]
      },
      //Enforce that type parameters (generics) are prefixed with T
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      }
    ],
    "prefer-const": "off" // Turn rule off
  }
}
